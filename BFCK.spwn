#[cache_output]

round = (num) {
    round = (num: @number) => @string($.floor(num) if $.fract(num) <= 0.5 else $.ceil(num))
}

ASCII = (input) {
    let ASCII_list = ('                                 !"' + "#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ▒▓▔▕▖▗▘▙▚▛▜▝▞▟■□▢▣▤▥▦▧▨▩▪▫▬▭▮▯▰▱▲△▴▵▶▷▸▹►▻▼▽▾▿◀◁◂◃◄◅◆◇◈◉◊○◌◍◎●◐◑◒◓◔◕◖◗◘◙◚◛◜◝◞◟◠◡◢◣◤◥◦◧◨◩◪◫◬◭◮◯◰◱◲◳◴◵◶◷◸◹◺◻◼◽◾◿☀☁☂☃☄★☆☇☈☉☊☋☌☍☎☏☐☑").split("")
    if input == " " {
        return 32
    } else if ASCII_list.contains(input) {
        return ASCII_list.index(input)
    } else if input.type == @number && input <= ASCII_list.length {
        return ASCII_list[input]
    }
}

BFCK = (text = @string) {
    let squares = []
    let cell = 0
    let square = []
    let sqrts = []
    let multiplications = []
    let code = ""
    let text_letters = []

    for letter in 0..text.length {
        if !(text_letters.contains(text[letter])) {
            text_letters.push(text[letter])
        }
        sqrts.push(round($.sqrt(ASCII(text[letter]))))
        if !(square.contains(@number(sqrts[letter]))) {
            square.push(@number(sqrts[letter]))
        }
        squares.push(round($.sqrt(ASCII(text_letters[number]))))
    }
    for sum in 0..square.length {
        for plus in 0..square[sum] {
            code = code + "+"
        }
        code = code + ">"
        cell = cell + 1 
    }
    for back in 0..cell {
        code = code + "<"
    }
    squares.push(0)
    let substract = 0
    for number in 0..square.length {
        let goback = 0
        code = code + "[-"
        for foward in 0..cell {
            code = code + ">"
            goback ++
        }
        for sum in 0..((squares.index_all(@string(square[number]))).length) {
            for plus in 0..square[number] {
                code = code + "+"
            }
            if !((squares.index_all(@string(square[number]))).length <= sum + 1) {
                for back in 0..@number((squares.index_all(@string(square[number])))[sum]) - @number((squares.index_all(@string(square[number])))[sum + 1]) {
                    code = code + ">"
                    goback ++
                }
            } 
        }
        for back in 0..goback {
            code = code + "<"
        }
        code = code + "]>"
    }
    let position = 0
    for letter in 0..text.length {
        for move in 0..$.abs(position - text_letters.index(text[letter])) {
            if position > text_letters.index(text[letter]) {
                code = code + "<"
                position = position - 1
            } else {
                code = code + ">"
                position = position + 1
            }
        }
        if letter == text.split("").index(text[letter]) {
            for define in 0..$.abs(@number(round($.sqrt(ASCII(text[letter]))))^2 - ASCII(text[letter])) {
                if @number(round($.sqrt(ASCII(text[letter]))))^2 > ASCII(text[letter]) {
                    code = code + "-"
                } else {
                    code = code + "+"
                }
            }
        }
        code = code + "."
    }
    return code
}

BFCKin = (code) {
    let loop = 0
    let loops = []
    let cells = [0]
    let current_cell = 0
    let output = ""
    let unit = 0

    while unit <= code.length - 1 {  
        match code[unit] {
            == "+" : (cells[current_cell] = cells[current_cell] + 1),
            == "-" : (cells[current_cell] = cells[current_cell] - 1),
            == ">" : () {
                if cells.length == current_cell + 1 {
                        cells.push(0)
                }
                current_cell = current_cell + 1                
            } (),
            == "<" : (current_cell = current_cell - 1),
            == "." : (output = output + ASCII(cells[current_cell])),
            == "," : () {
                cells[current_cell] = @number($.get_input("\u{1b}[32m" + "Number ==> " + "\u{1b}[97m").trim())
            } (),
            == "[" : () {
                loops.push(unit)
            } (),
            == "]" : () {
                if cells[current_cell] == 0 {
                    $.pop(loops)
                } else {
                    unit = $.pop(loops) - 1
                }
            } ()
        }
        unit = unit + 1
    }
    return output
}
